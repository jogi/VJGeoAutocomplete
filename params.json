{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Simple Objective-C wrapper for Google Places Autocomplete API.","body":"# VJGeoAutocomplete\r\n\r\nVJGeoAutocomplete is a Objective-C wrapper for the [Google Places Autocomplete API](https://developers.google.com/places/documentation/autocomplete). It allows to autocomplete addresses. It is block-based for easy integration. For parsing the JSON response received from the Autocomplete API [JSONKit](https://github.com/johnezang/JSONKit). Make sure you read the [usage limits](https://developers.google.com/places/documentation/index#usage_limits) before using VJGeoAutocomplete.\r\n\r\n## Installation\r\n\r\n* Include the folder `VJGeoAutocomplete/Library` into your project\r\n* Add *CoreLocation* to your project.\r\n* Add flag `-fno-objc-arc` to `JSONKit.m`\r\n\r\n## Usage\r\n### Using the Autocomplete API\r\n\r\nChange the value of `kVJGeoAutocompleteGoogleAPIKey` in `VJGeoAutocomplete.h` before using this. The instructions on how to obtain an API key can be accessed [here](https://developers.google.com/places/documentation/#Authentication). \r\n\r\n``` objective-c\r\n[VJGeoAutocomplete autocomplete:text completion:^(NSArray *predictions, NSError *error) {\r\n            //do something with the predictions, handle errors\r\n            });\r\n        }];\r\n```\r\n\r\nHere `predictions` is an array of `VJGeoPrediction` objects (more on that below).\r\n\r\nTo use the `location` and `radius` parameters of Autocomplete API you can do:\r\n\r\n``` objective-c\r\n+ (VJGeoAutocomplete*)autocomplete:(NSString *)address location:(CLLocationCoordinate2D)location radius:(CLLocationDistance)radius completion:(void (^)(NSArray *predictions, NSError *error))block;\r\n```\r\n\r\n### Cancelling requests\r\n\r\nMake sure you cancel requests for which the user isn't waiting on anymore by keeping a pointer to your VJGeoAutocomplete object and calling `cancel` on it. In all cases, the request will time out after 20s.\r\n\r\n## About the VJGeoPrediction object\r\n\r\n`VJGeoPrediction` is basically just NSObject with a few convenience methods. Here's what it look's like:\r\n\r\n``` json\r\n{\r\n    formattedDescription: \"1577 Woodbine Avenue, Georgina, ON, Canada\",\r\n    matchedSubstrings: [\r\n        {\r\n            length: 8,\r\n            offset: 0\r\n        }\r\n    ],\r\n    terms: [\r\n        {\r\n            offset: 0,\r\n            value: \"1577 Woodbine Avenue\"\r\n        },\r\n        {\r\n            offset: 22,\r\n            value: \"Georgina\"\r\n        },\r\n        {\r\n            offset: 32,\r\n            value: \"ON\"\r\n        },\r\n        {\r\n            offset: 36,\r\n            value: \"Canada\"\r\n        }\r\n    ],\r\n    types: [\r\n        \"route\",\r\n        \"geocode\"\r\n    ] \r\n}\r\n```\r\n\r\n## Credits\r\n\r\nVJGeoAutocomplete is brought to you by [Vashishtha Jogi](http://vashishthajogi.com). The structure of the library is highly influenced by [Sam Vermette's](http://samvermette.com) [SVGeocoder](https://github.com/samvermette/SVGeocoder) If you have feature suggestions or bug reports, feel free to help out by sending pull requests or by [creating new issues](https://github.com/jvashishtha/VJGeoAutocomplete/issues/new). If you're using VJGeoAutocomplete in your project, attribution would be nice.\r\n\r\n## License\r\n\r\n[Under a Creative Commons Attribution 3.0 Unported License](http://creativecommons.org/licenses/by/3.0/).","name":"VJGeoAutocomplete"}